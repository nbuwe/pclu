.\" This manual page is based on the "CLU User's Guide" in pclu.tex
.Dd October 23, 2022
.Dt PCLU 1
.Os
.Sh NAME
.Nm pclu
.Nd portable CLU compiler
.\"
.Sh SYNOPSIS
.Nm
.Op Ar commands \&...
.\"
.Sh DESCRIPTION
.Pp
.Nm
compiles CLU programs by executing commands to the compiler.
If no command line arguments are specified
.Nm
starts an interactive session.
.Pp
The command line arguments are interpreted as a set of compiler
commands.
Command line arguments that start with a dash
.Pq Sq Fl
are compiler commands and command line arguments until the next
compiler command are the arguments of that compiler command.
For historical reasons a hash sign
.Pq Sq Ic \&#
can also be used instead of a dash to start a compiler command, which
is obviously quite inconvenient in a Unix environment where hash is a
shell comment character, but you can still find that usage in the old
makefiles.
.Pp
A CLU program consists of one or more modules, also known as
.Em abstractions .
The
.Em interface specification
for an abstraction completely describes how clients (i.e., other
abstractions) see the abstraction and how they can use it.
The interface specification for a procedural or iteration abstraction
is determined by the header for that procedure or iterator;
the interface specification for a data abstraction (i.e., a cluster)
is determined by the header for the cluster together with the headers
for the operations named in the cluster header.
The implementation of each abstraction is theoretically invisible to
its clients.
.\"
.\" .CLU
.Pp
Generally, the code for each module is kept in a separate file, the name
of which ends with
.Ic \&.clu .
.\"
.\" .SPC
.Pp
Interface specifications of abstractions may be provided in a
.Dq spec
file the name of which ends with
.Ic \&.spc .
A spec file differs from a
.Ic \&.clu
file in that it contains procedure and cluster headers, but no
implementations.
.\"
.\" .EQU
.Pp
Sometimes it is convenient for several
modules to employ common declarations for compile-time constants, e.g.,
.Li "maxLen = 100"
or
.Li "intSeq = seq[int]" .
Such
.Dq equates
are generally kept in a separate file, the name of which ends with
.Ic \&.equ .
.Pp
The CLU compiler maintains an in-core type library and a
.Em compilation environment
.Pq CE .
.Pp
The CE contains
.Dq equate
information; it is initially empty.
.Pp
In order to do proper type checking between abstractions, the CLU
compiler adds interface specifications to its in-core type library.
.\"
.\" The term "DU" is not explained anywhere in the distribution it
.\" seems.  It is defined in the CLU manual MIT/LCS/TR-225 (Chatper 4.
.\" The Library, p.17), but most extant copies of the manual are scans
.\" without the OCR layer, so it cannot be easily searched for.
.\"
.\"   The library provides a hierarchical name space for retrieving
.\"   information about abstractions.  The leaf node of the library are
.\"   _description units_ (DUs), one for each abstraction. [...]  A DU
.\"   contains all system-maintained information about its abstraction.
.\"
This internal information about an abstraction is sometimes referred
to as DU \(em
.Em description unit
.Po
you may encounter this otherwise cryptic abbreviation is various
compiler messages
.Pc .
When it processes an abstraction, the compiler remembers the interface
of the abstraction in the type library and uses it in future type
checking during the same compiler run.
The in-core library may be dumped into a
.Ic \&.lib
file that can be quickly loaded when compiling other code.
This is similar to precompiled headers supported by
.Tn C
compilers.
.\"
.\"
.Ss Compiler commands
Command names are case-insensitive.
They can be abbreviated up to unique prefix.
.Pp
If a command takes an optional boolean argument and the argument is
not supplied, it's taken to be
.Ic true .
.Pp
Commands that accept file names automatically supply the appropriate
suffix if necessary.
.Pp
If a command takes multiple arguments you may use spaces and/or commas
to separate them
.Pq the use of commas is not reflected in the descriptions below .
.Pp
Thus to compile the files
.Li a.clu
and
.Li b.clu
you can use either
.D1 Ic compile Li a.clu b.clu
or
.Dl Ic CO Li a,b
.Bl -tag -width Ic
.\" --------
.\" HELP
.\"
.It Ic \&?
Print short help.
Synonym of
.Ic help .
.\" --------
.\" ALLOW
.\"
.It Ic allow Op Ic true No \(ba Ic false
Allow
.Ic compile
to generate code even if there are errors.
.\" --------
.\" BINDIR
.\"
.It Ic bindir Op Ar directory
Set or reset the directory for the binary files.
Note that in the case of
.Nm
.Po
as opposed to the original native compilers
.Pc
the
.Dq binary
files are
the
.Ic \&.c
files.
.\" --------
.\" BINSUF
.\"
.It Ic binsuf Op Ar suffix
Set or reset the suffix for the
.Dq binary
.Tn C
files.
.\" --------
.\" CCDBG
.\"
.It Ic ccdbg Op Ar command No \(ba Ic reset
Show, set, or reset the command to compile
.Tn C
output from the compiler to the native code
when
.Ic optimize
is turned off.
.\" --------
.\" CCOPT
.\"
.It Ic ccopt Op Ar command No \(ba Ic reset
Show, set, or reset the command to compile
.Tn C
output from the compiler to the native code when
.Ic optimize
is turned on.
.Pp
You can prevent
.Nm
from further compiling its
.Tn C
output by setting
.Ic ccopt
.Pq respectively, Ic ccdbg
command to a very short string.
The common idiom is to use
.Fl ccopt Ic 0 .
.\" --------
.\" CE
.\"
.It Ic ce Op Ar filename \&...
Create a new
.Em compilation environment
.Pq CE
from the named
.Ic \&.equ
files.
Any previously existing compilation environment is forgotten.
The compiler will supply the suffix
.Ic \&.equ
if it is not part of
.Ar filename .
Each file named in this command must contain only equates.
.\" --------
.\" CFILES
.\"
.It Ic cfiles Op Ic true No \(ba Ic false
Do (don't) keep the intermediate
.Ic \&.c
files.
.\" --------
.\" CHECK
.\"
.It Ic check Ar filename \&...
Check for syntax and type errors in the named
.Ic \&.clu
files.
The compiler will supply the suffix
.Ic \&.clu
if it is not part of
.Ar filename .
See also
.Ic compile ,
.Ic parse .
.\" --------
.\" CLU
.\" COMPILE
.\"
.It Ic clu Ar filename \&...
Synonym of
.Ic compile .
.It Ic compile Ar filename \&...
Compile the named
.Ic \&.clu
files into
.Ic \&.o
files.
The compiler will supply the suffix
.Ic \&.clu
if it is not part of
.Ar filename .
A
.Ic \&.o
file is produced only if there are no errors
.Pq but see Ic allow .
The compiler generally produces
.Ic \&.o
files that are suitable for use with the CLU debugger.
Once a program has been debugged, more efficient
.Ic \&.o
files can be produced by issuing the
.Ic optimize
command to the compiler before
.Ic compile
command.
.Pp
See also
.Ic ccopt ,
.Ic ccdbg ,
and
.Ic cfiles .
.\" --------
.\" DIR
.\"
.It Ic dir Op Ar directory
Set or reset working directory.
.\" --------
.\" DUMP
.\"
.It Ic dump Ar filename
The compiler retains in the type library the interface of every module it sees.
This library can be dumped to a
.Ic \&.lib
file with the
.Ic dump
command and later reloaded with the
.Ic merge
command.
The compiler will supply the suffix
.Ic \&.lib
if it is not part of
.Ar filename .
Libraries make complete type-checking much easier and faster,
particularly for very large programs.
.\" --------
.\" ESCAPE
.\"
.It Ic escape
Suspend the compiler process.
.\" --------
.\" EXPUNGE
.\"
.It Ic expunge Op Ic true No \(ba Ic false
Do (don't) remember non-cluster specs.
.\" --------
.\" EXTERNALS
.\"
.It Ic externals Op Ic true No \(ba Ic false
Do (don't) list abstractions used in the file being processed whose
specifications are known.
.\" FORCE
.It Ic force Op Ic true No \(ba Ic false
Do (don't) generate code for
.Ic force Ns Li \&[ Ns Ar t Ns Li \&] .
.\" --------
.\" FORGET
.\"
.It Ic forget Ar module \&...
Forget DU specs of modules.
.\" --------
.\" HELP
.\"
.It Ic help
Print short help.
Synonym of
.Ic \&? .
.\" --------
.\" KILL
.\"
.It Ic kill
Exit CLU.  Synonym of
.Ic quit .
.\" --------
.\" LOCALS
.\"
.It Ic locals Op Ic true No \(ba Ic false
Ignored by
.Nm .
Do (don't) generate local variable names.
.\" --------
.\" MERGE
.\"
.It Ic merge Ar filename \&...
Load libraries from the given
.Ic \&.lib
files and merge them with the current type library.
The compiler will supply the suffix
.Ic \&.lib
if it is not part of
.Ar filename .
If the current library already contains an interface for a module in
the library being loaded, the new interface will replace the old.
.\" --------
.\" NEWLIB
.\"
.It Ic newlib
Flush the in-core type library.
.\" --------
.\" OPTIMIZE
.\"
.It Ic optimize Op Ic time No \(ba Ic space No \(ba Ic false
Turn code optimization on or off.
Optimized code runs faster.
Unoptimized code provides more information when used with the CLU
debugger.
See also
.Ic ccopt ,
.Ic ccdbg .
.\" --------
.\" PARSE
.\"
.It Ic parse Ar filename \&...
Check for syntax errors in the named
.Ic \&.clu
files.
The compiler will supply the suffix
.Ic \&.clu
if it is not part of
.Ar filename .
See also
.Ic check ,
.Ic compile .
.\" --------
.\" QUIT
.It Ic quit
Exit CLU.  Synonym of
.Ic kill .
.\" --------
.\" SAFE
.\"
.It Ic safe Op Ic true No \(ba Ic false
Do (don't) check for redefining identifiers used in the system.
.\" --------
.\" SPECS
.\"
.It Ic specs Ar filename \&...
Enter the interfaces of the abstractions in the named
.Ic \&.spc
or
.Ic \&.clu
files into the type library without type-checking any implementation
bodies.
The compiler will supply the suffix
.Ic \&.spc
or
.Ic \&.clu
if it is not part of
.Ar filename .
.\" --------
.\" UNMERGE
.\"
.It Ic unmerge Ar input \&...
Forget DU specs of library modules.
.\" --------
.\" XCE
.\"
.It Ic xce Ar filename \&...
Add the equates in the named
.Ic \&.equ
files to the current compilation environment.
See
.Ic ce .
.\" --------
.\" XFILE
.\"
.It Ic xfile Ar filename \&...
Execute compiler commands from the specified files.
The compiler will supply the suffix
.Ic \&.xfile
if it is not part of
.Ar filename .
.\"
.El
.\"
.Sh ENVIRONMENT
.Bl -tag -width Ev
.\"
.It Ev CLUCC
The
.Tn C
compiler used by the default
.Ic ccdbg
and
.Ic ccopt
commands to compile the
.Nm
.Tn C
output to the native code.
If not set, the value of
.Ev CC
environment variable is used, otherwise
.Xr cc 1 .
.\"
.It Ev CLUCFLAGS
The options to the
.Tn C
compiler.
If this variable is not set, the default
.Ic ccdbg
and
.Ic ccopt
commands use appropriate
.Fl g
and
.Fl O
options.
.\"
.It Ev CLUHOME		\" cf. sys/clu/_home_dir.clu
The CLU library location.
.Pp
If this variable is not set, but the user named
.Li CLU
exists in the system, then its home directory
.Pa \&~CLU
is used
.Po
hence the name of the variable
.Pc .
.Pp \" XXX
Otherwise a set of fallback locations is tried.
A packaged version of
.Nm
will probably be modified to use just the package installed location.
.El
.\"
.Sh FILES
.Bl -tag -width Pa
.\"
.It Pa /usr/local/lib/clu
The default location of the CLU library.
Overriden by
.Ev CLUHOME .
Referred to as
.Pa \&~CLU
in file names below.
.It Pa \&~CLU/system.names
The list of identifiers checked when
.Ic safe
mode is enabled.
.It Pa ~/.lineedit.keys
Key bindings for line editing in the interactive mode.
.It Pa ~/.inputrc
.Tn GNU
readline configuration file.
.El
.\"
.Sh EXAMPLES
.Ss Hello, World
You can compile your first CLU program:
.Bd -literal -offset indent
start_up = proc ()
    stdout: stream := stream$primary_output()

    who: string := get_name()
    stream$puts(stdout, "hello, " || who)
  end start_up

get_name = proc () returns (string)
    user: string := _environ("USER")
     except when not_found:
        user := "world"
      end
    return (user)
  end get_name
.Ed
with
.Bd -literal -offset indent
$ pclu -merge ~CLU/lib/lowlev.lib -spec hello.clu -clu hello.clu
\&...
$ plink -o hello hello.o
$ ./hello
hello, uwe
$ env - ./hello
hello, world
.Ed
.\"
.Pp
Here
.Fl merge\|
loads
.Pq Dq includes
the dumped type library
.Pq Dq precompiled header
.Pa lowlev.lib
from the
.Nm
library location.
The compiler automatically replaces
.Pa ~CLU\|
with the path to the library, either the hardcoded one or the one
specified in the
.Ev CLUHOME
environment variable, you don't need the user named
.Li CLU
to exist on your system.
.Pp
We merge
.Pa lowlev.lib
because our program uses
.Fn _environ
procedure from the standard library.
.Pp
Next we
.Fl spec
our program source
.Po
note that the full name of the compiler command is
.Ic specs ,
but we can abbreviate it
.Pc .
The compiler is single pass and CLU does not support declarations the
way e.g.\&
.Tn C
does.
Thus for the compiler to know the type of
.Fn get_name
when it compiles
.Fn start_up
you need to get it from somewhere.
For public interface specifications you would typically use a spec
file to declare them, but for small programs and for
.Dq private
procedures the common idiom is to spec the source before compiling it.
If you program is small and simple and only has backward references
(e.g. if we wrote
.Fn get_name
before
.Fn start_up
that uses it)
you can get away with not speccing the source.
.Pp
Then finally we can compile the program itself with
.Fl clu Li hello.clu .
The compiler emits the
.Pa hello.c
file and then invokes
.Xr cc 1
to compile it to
.Pa hello.o .
The
.Tn C
file is then removed unless
.Fl cfiles
was specified.
.Pp
Finally we call
.Xr plink 1
script to link the output from the compier with the CLU standard
library to obtain a program.
.\"
.Pp
You can put
.Nm
commands into a file so as not to type them repeatedly or to make
them a proper dependency in a makefile.
For example you can compile your hello world program as follows.
This example omits implied suffixes to demonstrate that feature, but
normally you would want to be explicit for the sake of clarity:
.Bd -literal -offset indent
$ cat hello.xfile
optimize
cfiles true
merge ~CLU/lib/lowlev
spec hello
compile hello
$ pclu -xf hello
.Ed
.\"
.Sh SEE ALSO
.Xr plink 1
.\"
.Sh CAVEATS
When
.Nm
is started interactively
.Pq without arguments
it supports line editing and reads user's
.Pa \&.inputrc
file
.Dq for compatibility with the user's Tn GNU keys .
Be aware of potential compatibility problems if your
.Pa \&.inputrc
uses advanced readline features.
