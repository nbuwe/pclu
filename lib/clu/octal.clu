% Copyright Massachusetts Institute of Technology 1980, 1989

i_oparse = proc (s: string) returns (int) signals (bad_format, overflow)
	zero = char$c2i('0')
	num: int := 0
	i: int := 1
	sign: char := s[1]
	   except when bounds: signal bad_format end
	c: char := sign
	if sign = '+'  cor  sign = '-'
	   then i := 2
		c := s[2]
		   except when bounds: signal bad_format end
	   end
	while true do
		if c < '0'  cor  c > '7'
		   then signal bad_format end
		num := num * 8 - (char$c2i(c) - zero)
		i := i + 1
		c := s[i]
		end
	   resignal overflow
	   except when bounds: end
	if sign = '-'
	   then return(num)
	   else return(-num)
	   end resignal overflow
	end i_oparse

i_ounparse = proc (i: int) returns (string)
	fixup = char$c2i('0') + 8
	sign: string := ""
	if i < 0
	   then sign := "-"
	   else i := -i
	   end
	s: string := ""
	while true do
		j: int := i // 8
		i := i / 8
		if j = 0
		   then s := "0" || s
		   else s := string$c2s(char$i2c(fixup - j)) || s
			i := i + 1
		   end
		if i = 0
		   then return(sign || s) end
		end
	end i_ounparse
